plugins {
	id "java"
	id "java-library"
	id "checkstyle"
	id "maven-publish"
	id "me.modmuss50.remotesign" version "0.1.0"
	id "org.cadixdev.licenser" version "0.6.1"
}

group "net.fabricmc"
archivesBaseName = "class-tweaker"

def ENV = System.getenv()
version = "0.0.0"
logger.lifecycle("Building class-tweaker: " + version)

repositories {
	mavenCentral()

	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

def javaVersion = JavaVersion.current()

if (ENV.JDK_VERSION) {
	javaVersion = JavaVersion.toVersion(ENV.JDK_VERSION)

	// When on CI build and run using the pass in JDK version.
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(ENV.JDK_VERSION)
		}
	}
}

// Main sources are always built to target java 8
tasks.getByName(project.sourceSets.main.compileJavaTaskName) {
	if (javaVersion.isJava10Compatible()) {
		it.options.release = 8
	}

	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

// Test source set builds against the java version we are using.
tasks.getByName(project.sourceSets.test.compileJavaTaskName) {
	if (javaVersion.isJava10Compatible()) {
		options.release = javaVersion.majorVersion as int
	}

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

if (javaVersion.isCompatibleWith(JavaVersion.VERSION_20)) {
	repositories {
		maven {
			url = "https://repository.ow2.org/nexus/content/repositories/snapshots/"
			content {
				includeGroup "org.ow2.asm"
			}
		}
	}
}

dependencies {
	def asmVersion = "9.4"
	def junitVersion = "5.8.2"
	def assertJVersion = "3.22.0"

//	if (javaVersion.isCompatibleWith(JavaVersion.VERSION_20)) {
//		asmVersion = "9.4-SNAPSHOT"
//	}

	api "org.ow2.asm:asm:$asmVersion"
	api "org.ow2.asm:asm-commons:$asmVersion" // For Remapper
	api "net.fabricmc:tiny-remapper:0.8.6" // For validator

	compileOnly 'org.jetbrains:annotations:23.0.0'

	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	testImplementation("org.assertj:assertj-core:$assertJVersion")
}

license {
	header project.file("HEADER")
	include "**/*.java"
}

checkstyle {
	configFile = project.file("checkstyle.xml")
	toolVersion = "9.3" // Last version to support java 8
}

java {
	withSourcesJar()
}

test {
	useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

if (ENV.SIGNING_SERVER) {
	remoteSign {
		requestUrl ENV.SIGNING_SERVER
		pgpAuthKey ENV.SIGNING_PGP_KEY
		jarAuthKey ENV.SIGNING_JAR_KEY

		sign (jar, javadocJar, sourcesJar)

		afterEvaluate {
			sign publishing.publications.mavenJava
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			if (ENV.SIGNING_SERVER) {
				artifact(signJar) {
					classifier null
				}

				artifact(signJavadocJar) {
					classifier "javadoc"
				}

				artifact(signSourcesJar) {
					classifier "sources"
				}
			} else {
				from components.java

				artifact(javadocJar)
			}

			pom {
				name = 'class-tweaker'
				description = 'Class tweaker provides a way to modify classes.'
				url = 'https://github.com/FabricMC/class-tweaker'

				scm {
					connection = "scm:git:https://github.com/FabricMC/class-tweaker.git"
					developerConnection = "scm:git:git@github.com:FabricMC/class-tweaker.git"
					url = "https://github.com/FabricMC/class-tweaker"
				}

				issueManagement {
					system = "GitHub"
					url = "https://github.com/FabricMC/class-tweaker/issues"
				}

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = "modmuss50"
						name = "modmuss50"
						email = "modmuss50@fabricmc.net"
					}

					developer {
						id = "sfPlayer"
						name = "Player"
						email = "player@fabricmc.net"
					}
				}
			}
		}
	}

	repositories {
		mavenLocal()

		if (ENV.MAVEN_URL) {
			repositories.maven {
				name "fabric"
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}

		// TODO enable central publishing when ready.
		/* if (ENV.MAVEN_CENTRAL_URL) {
			repositories.maven {
				name "central"
				url ENV.MAVEN_CENTRAL_URL
				credentials {
					username ENV.MAVEN_CENTRAL_USERNAME
					password ENV.MAVEN_CENTRAL_PASSWORD
				}
			}
		} */
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/class-tweaker/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
